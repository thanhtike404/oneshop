generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String?
  lastName    String?
  role        Role      @default(CUSTOMER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  orders      Order[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model Category {
  id            String        @id @default(uuid())
  name          String
  slug          String        @unique
  description   String?
  imageUrl      String?
  subcategories Subcategory[]
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  iconUrl     String?    // Nullable subcategory icon
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  name          String
  slug          String          @unique
  description   String
  basePrice     Float
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory?    @relation(fields: [subcategoryId], references: [id])
  variants      ProductVariant[]
  images        ProductImage[]
  stocks        Stock[]
  cartItems     CartItem[]      // Add this relation
  orderItems    OrderItem[]     // Add this relation
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model ProductVariant {
  id          String    @id @default(uuid())
  name        String
  priceOffset Float     @default(0)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  stocks      Stock[]
  cartItems   CartItem[]    // Add this relation
  orderItems  OrderItem[]   // Add this relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Stock {
  id          String         @id @default(uuid())
  size        String? // Optional field
  product     Product        @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   String
  quantity    Int            @default(0)
  barcode     String?        @unique
  sku         String?        @unique
  location    String?        // Warehouse/shelf location
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CartItem {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  product   Product        @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Decimal
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OrderItem {
  id        String         @id @default(uuid())
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product        @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  price     Decimal        // Snapshot of price at time of purchase
  createdAt DateTime       @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}