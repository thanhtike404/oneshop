generator client {
  provider      = "prisma-client-js"
  output        = "generated"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  firstName  String?
  lastName   String?
  role       Role        @default(CUSTOMER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orders     Order[]
  pushTokens PushToken[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  slug          String        @unique
  description   String?
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  iconUrl     String?
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  description   String
  basePrice     Float
  categoryId    String
  subcategoryId String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isFeatured    Boolean          @default(false)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  stocks        Stock[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id          String      @id @default(uuid())
  name        String
  priceOffset Float       @default(0)
  productId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  stocks      Stock[]
}

model Stock {
  id        String         @id @default(uuid())
  productId String
  variantId String
  quantity  Int            @default(0)
  barcode   String?        @unique
  sku       String?        @unique
  location  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  size      String?
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model CartItem {
  id        String         @id @default(uuid())
  userId    String
  productId String
  variantId String
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   Product        @relation(fields: [productId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  price     Decimal
  createdAt DateTime       @default(now())
  order     Order          @relation(fields: [orderId], references: [id])
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Sliders {
  id       String  @id @default(uuid())
  isActive Boolean @default(true)
  title    String
  image    String
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model PushToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
